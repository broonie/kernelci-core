#!/usr/bin/env groovy

/*
  Copyright (C) 2020 Collabora Limited
  Author: Lakshmipathi Ganapathi <lakshmipathi.ganapathi@collabora.com>

  This module is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free
  Software Foundation; either version 2.1 of the License, or (at your option)
  any later version.

  This library is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
  details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/


@Library('kernelci') _
import org.kernelci.util.Job

def build_rootfs(rootfs_config, arch, pipeline_version,kci_core) {

    dir(kci_core) {
        sh(script: """\
./kci_rootfs \
build \
--config ${rootfs_config} \
--arch  ${arch} \
--data-path jenkins/debian/debos 
mkdir -p ${pipeline_version} 
mv jenkins/debian/debos/${rootfs_config} ${pipeline_version}
""")

    archiveArtifacts artifacts: "${pipeline_version}/**"

    withCredentials([string(credentialsId: params.KCI_TOKEN_ID, variable: 'API_TOKEN')]) {
            sh(script: """\
./kci_rootfs \
upload \
--token ${API_TOKEN} \
--api ${params.KCI_API_URL} \
--rootfs-dir ${pipeline_version} \
--upload-path images/rootfs/debian/${rootfs_config}/${pipeline_version} 
""")

        }
    }

}

node("debos && docker") {
    def j = new Job()
    def kci_core = "${env.WORKSPACE}/kernelci-core"
    def rootfs_config = "${params.CONFIG_NAME}"
    def arch = "${params.ARCH}"
    def docker_image = "${params.DOCKER_BASE}debos"
    def pipeline_version =  "${params.PIPELINE_VERSION}"

    j.dockerPullWithRetry(docker_image).inside() {
        j.cloneKciCore(kci_core, params.KCI_CORE_URL, params.KCI_CORE_BRANCH)
    }

    j.dockerPullWithRetry(docker_image).inside(" --privileged --device /dev/kvm ") {
        stage("Build ${rootfs_config} ${arch}") {
            timeout(time: 60, unit: 'MINUTES') {
	        build_rootfs(rootfs_config, arch, pipeline_version, kci_core)
            }
        }
    }
}
